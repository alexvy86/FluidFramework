name: "release-on-tag"

on:
  push:
    tags:
      - "client_v*"

jobs:
  patch-release:
    name: Create patch release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./build-tools
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
        with:
          fetch-depth: "0" # all history
          persist-credentials: false

      - uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd # ratchet:pnpm/action-setup@v2
        with:
          version: "^7"
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # ratchet:actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Fluid build tools
        run: |
          corepack enable
          pnpm install --frozen-lockfile
          pnpm run build:compile
          # pnpm install --global packages/build-cli

      - name: Check out tag
        run: |
          git checkout ${{ github.ref }}

      - name: Get release JSON
        run: |
          echo "RELEASE_JSON=$(packages/build-cli/bin/run release fromTag ${{ github.ref }} --json | jq -c)" >> $GITHUB_ENV

      - name: Create release reports (manifests)
        run: |
          mkdir reports
          packages/build-cli/bin/run release report -g ${{ fromJson(env.RELEASE_JSON).packageOrReleaseGroup }} -o reports

      # This action sets a "changelog" output variable that contains the generated changelog text.
      # - name: Generate changelog
      #   id: changelog
      #   uses: heinrichreimer/github-changelog-generator-action@v2.3
      #   with:
      #     token: ${{ github.token }}
      #     dueTag: ${{ fromJson(env.RELEASE_JSON).tag }}
      #     sinceTag: ${{ fromJson(env.RELEASE_JSON).previousTag }}

      # This action sets a "changes" output variable that contains the generated changelog text.
      # - name: Generate changelog
      #   id: changelog
      #   if: fromJson(env.RELEASE_JSON).releaseType == 'patch' && fromJson(env.RELEASE_JSON).packageOrReleaseGroup == 'client'
      #   uses: requarks/changelog-action@v1
      #   with:
      #     token: ${{ github.token }}
      #     fromTag: ${{ fromJson(env.RELEASE_JSON).previousTag }}
      #     toTag: ${{ fromJson(env.RELEASE_JSON).tag }}
      #     writeToFile: false

      # This action sets a "changelog" output variable that contains the generated changelog text.
      # - name: Generate changelog
      #   uses: Bullrich/generate-release-changelog@master
      #   id: changelog
      #   with:
      #     from-tag: ${{ fromJson(env.RELEASE_JSON).previousTag }}
      #     to-tag: ${{ fromJson(env.RELEASE_JSON).tag }}
      #     type: ${{ fromJson(env.RELEASE_JSON).releaseType }}

      - name: Generate changelog
        run: |
          auto-changelog \
          --starting-version ${{ fromJson(env.RELEASE_JSON).previousTag }} \
          --ending-version ${{ fromJson(env.RELEASE_JSON).tag }} \
          --tag-prefix ${{ fromJson(env.RELEASE_JSON).packageOrReleaseGroup }}_v \
          --output auto-changelog.md \
          --template changelog.hbs

      - name: Create GH release
        if: fromJson(env.RELEASE_JSON).releaseType == 'patch' && fromJson(env.RELEASE_JSON).packageOrReleaseGroup == 'client'
        uses: ncipollo/release-action@v1
        with:
          # Allow updates to existing releases.
          allowUpdates: true

          # Will skip if a published (non-draft) release already exists.
          skipIfReleaseExists: true

          draft: true
          omitDraftDuringUpdate: true # don't change the draft state when updating

          name: "Fluid Framework v${{ fromJson(env.RELEASE_JSON).version }} (${{ fromJson(env.RELEASE_JSON).releaseType }})"
          omitNameDuringUpdate: false # always overwrite the name

          # body: ${{ steps.changelog.outputs.changelog }}
          bodyFile: build-tools/auto-changelog.md
          omitBodyDuringUpdate: false # Don't overwrite the body

          artifacts: "build-tools/reports/*.*"
          artifactErrorsFailBuild: true
          tag: ${{ fromJson(env.RELEASE_JSON).tag }}
          # generateReleaseNotes: true

      # - name: Create release
      #   if: fromJson(env.RELEASE_JSON).releaseType == 'patch'
      #   uses: marvinpinto/action-automatic-releases@latest
      #   with:
      #     repo_token: "${{ github.token }}"
      #     automatic_release_tag: ${{ fromJson(env.RELEASE_JSON).tag }}
      #     prerelease: false
      #     draft: true
      #     title: "Fluid Framework v${{ fromJson(env.RELEASE_JSON).version }} (${{ fromJson(env.RELEASE_JSON).releaseType }})"
      #     files: |
      #       reports/*.*

      # - name: Create release
      #   if: fromJson(env.RELEASE_JSON).releaseType == 'patch'
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     draft: true
      #     prerelease: false
      #     repo_token: "${{ github.token }}"
      #     tag_name: ${{ fromJson(env.RELEASE_JSON).tag }}
      #     name: "Fluid Framework v${{ fromJson(env.RELEASE_JSON).version }} (${{ fromJson(env.RELEASE_JSON).releaseType }})"
      #     files: |
      #       reports/*.*
      #     fail_on_unmatched_files: true

