/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

// eslint-disable-next-line import/no-internal-modules
import type { IFluidDataStoreRuntime } from "@fluidframework/datastore-definitions/internal";
import type { ContainerSchema, IFluidContainer, IFluidHandle } from "fluid-framework";

import { start } from "@/infra/authHelper";
import { TREE_CONFIGURATION, type CONTAINER_SCHEMA } from "@/types/sharedTreeAppSchema";

const { client, getShareLink, containerId: _containerId } = await start();

export const containerIdFromUrl = (): string => _containerId;

export async function loadContainer<T extends ContainerSchema>(
	containerSchema: T,
	id: string,
): Promise<IFluidContainer<T>> {
	const { container } = await client.getContainer(id, containerSchema);
	return container;
}

export async function createContainer<T extends ContainerSchema>(
	containerSchema: T,
): Promise<IFluidContainer<T>> {
	const { container } = await client.createContainer(containerSchema);
	return container;
}

export async function postAttach(
	containerId: string,
	container: IFluidContainer<typeof CONTAINER_SCHEMA>,
): Promise<void> {
	// Create a sharing id to the container and set it in the URL hash.
	// This allows the user to collaborate on the same Fluid container with other users just by sharing the link.
	const shareId = await getShareLink(containerId);
	history.replaceState(undefined, "", `#${shareId}`);

	const treeView = container.initialObjects.appState.viewWith(TREE_CONFIGURATION);

	for (const task of treeView.root.taskGroups[0]?.tasks ?? []) {
		task.image = await uploadBlob(pngBytes.buffer, container);
	}
	treeView.dispose(); // After initializing, dispose the tree view so later loading of the data can work correctly
}

async function uploadBlob(blob: ArrayBufferLike, container: IFluidContainer<typeof CONTAINER_SCHEMA>): Promise<IFluidHandle<ArrayBufferLike>> {
	// This is a workaround to access the `uploadBlob` method on the runtime.
	// It should be removed once Fluid exposes a public API for blob upload.
	// Note that this workaround is dependent on implementation details of SharedTree that may change in new releases.
	// The risk this poses is partly mitigated by the check below, but full functionality should be verified in a test that uses the uploadBlob API.
	const runtime = (container.initialObjects.appState as unknown as { runtime: IFluidDataStoreRuntime }).runtime;
	if (runtime === undefined) {
		// This will occur if SharedTree's implementation details change in a way that makes the above workaround invalid.
		// If this occurs, the workaround should be updated. Please reach out to the Fluid team for assistance.
		throw new Error('Runtime not found on SharedTree instance');
	}
	return runtime.uploadBlob(blob);
}

const pngBytes = new Uint8Array([
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
	0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64,
	0x08, 0x02, 0x00, 0x00, 0x00, 0xFD, 0xE9, 0x8C,
	0xA6, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58,
	0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20,
	0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00,
	0x01, 0x76, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA,
	0xEC, 0xD8, 0x31, 0x0E, 0x80, 0x20, 0x0C, 0x03,
	0x51, 0xE2, 0xFF, 0x9F, 0x9C, 0x37, 0xA1, 0x86,
	0x96, 0x0E, 0x03, 0x66, 0xFD, 0x4B, 0x41, 0xD9,
	0x9C, 0xA4, 0x10, 0xB1, 0xD5, 0x24, 0xF1, 0x80,
	0xB3, 0x79, 0xF8, 0x0C, 0x6F, 0x99, 0x20, 0x83,
	0x13, 0x80, 0x30, 0x34, 0x00, 0x02, 0x01, 0x00,
	0x8E, 0xFA, 0x28, 0x50, 0xF0, 0xE3, 0x67, 0x00,
	0x04, 0x02, 0x00, 0x1C, 0xF5, 0x51, 0xA0, 0xE0,
	0xC7, 0xCF, 0x00, 0x08, 0x04, 0x00, 0x38, 0xEA,
	0xA3, 0x40, 0xC1, 0x8F, 0x9F, 0x01, 0x10, 0x08,
	0x00, 0x70, 0xD4, 0x47, 0x81, 0x82, 0x1F, 0x3F,
	0x03, 0x20, 0x10, 0x00, 0xE0, 0xA8, 0x8F, 0x02,
	0x05, 0x3F, 0x7E, 0x06, 0x40, 0x20, 0x00, 0xC0,
	0x51, 0x1F, 0x05, 0x0A, 0x7E, 0xFC, 0x0C, 0x80,
	0x40, 0x00, 0x80, 0xA3, 0x3E, 0x0A, 0x14, 0xFC,
	0xF8, 0x19, 0x00, 0x81, 0x00, 0x00, 0x47, 0x7D,
	0x14, 0x28, 0xF8, 0xF1, 0x33, 0x00, 0x02, 0x01,
	0x00, 0x8E, 0xFA, 0x28, 0x50, 0xF0, 0xE3, 0x67,
	0x00, 0x04, 0x02, 0x00, 0x1C, 0xF5, 0x51, 0xA0,
	0xE0, 0xC7, 0xCF, 0x00, 0x08, 0x04, 0x00, 0x38,
	0xEA, 0xA3, 0x40, 0xC1, 0x8F, 0x9F, 0x01, 0x10,
	0x08, 0x00, 0x70, 0xD4, 0x47, 0x81, 0x82, 0x1F,
	0x3F, 0x03, 0x20, 0x10, 0x00, 0xE0, 0xA8, 0x8F,
	0x02, 0x05, 0x3F, 0x7E, 0x06, 0x40, 0x20, 0x00,
	0xC0, 0x51, 0x1F, 0x05, 0x0A, 0x7E, 0xFC, 0x0C,
	0x80, 0x40, 0x00, 0x80, 0xA3, 0x3E, 0x0A, 0x14,
	0xFC, 0xF8, 0x19, 0x00, 0x81, 0x00, 0x00, 0x00,
	0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60,
	0x82
]);
